spring:
  kafka:
    bootstrap-servers: ${KAFKA_SERVER:192.168.56.101:9092,192.168.56.103:9092,192.168.56.104:9092}
    producer:
      acks: ${KAFKA_PRODUCER_ACKS:all}
      batch-size: ${KAFKA_PRODUCER_BATCH:16384}
      buffer-memory: ${KAFKA_PRODUCER_BUFFER_MEMORY:33554432}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      retries: ${KAFKA_PRODUCER_RETRIES:0}

#spring:
#  #重要提示:kafka配置,该配置属性将直接注入到KafkaTemplate中
#  kafka:
#    bootstrap-servers: 10.200.8.29:9092
#    #https://kafka.apache.org/documentation/#producerconfigs
#    producer:
#      bootstrap-servers: ${KAFKA_SERVER:192.168.56.101:9092,192.168.56.103:9092,192.168.56.104:9092}
#      # 可重试错误的重试次数，例如“连接错误”、“无主且未选举出新Leader”
#      retries: 1 #生产者发送消息失败重试次数
#      # 多条消息放同一批次，达到多达就让Sender线程发送
#      batch-size: 16384 # 同一批次内存大小（默认16K）
#      # 发送消息的速度超过发送到服务器的速度，会导致空间不足。send方法要么被阻塞，要么抛异常
#      # 取决于如何设置max.block.ms，表示抛出异常前可以阻塞一段时间
#      buffer-memory: 314572800 #生产者内存缓存区大小(300M = 300*1024*1024)
#      #acks=0:无论成功还是失败，只发送一次。无需确认
#      #acks=1:即只需要确认leader收到消息
#      #acks=all或-1:ISR + Leader都确定收到
#      acks: 1
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer #key的编解码方法
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer #value的编解码方法
#      #开启事务，但是要求ack为all，否则无法保证幂等性
#      #transaction-id-prefix: "COLA_TX"
#      #额外的，没有直接有properties对应的参数，将存放到下面这个Map对象中，一并初始化
#      properties:
#        #自定义拦截器，注意，这里结尾时classes(先于分区器，快递先贴了标签再指定地址)
#        interceptor.classes: cn.com.controller.TimeInterceptor
#        #自定义分区器
#        #partitioner.class: com.alibaba.cola.kafka.test.customer.inteceptor.MyPartitioner
#        #即使达不到batch-size设定的大小，只要超过这个毫秒的时间，一样会发送消息出去
#        linger.ms: 1000
#        #最大请求大小，200M = 200*1024*1024，与服务器broker的message.max.bytes最好匹配一致
#        max.request.size: 209715200
#        #Producer.send()方法的最大阻塞时间(115秒)
#        # 发送消息的速度超过发送到服务器的速度，会导致空间不足。send方法要么被阻塞，要么抛异常
#        # 取决于如何设置max.block.ms，表示抛出异常前可以阻塞一段时间
#        max.block.ms: 115000
#        #该配置控制客户端等待服务器的响应的最长时间。
#        #如果超时之前仍未收到响应，则客户端将在必要时重新发送请求，如果重试次数（retries）已用尽，则会使请求失败。
#        #此值应大于replica.lag.time.max.ms（broker配置），以减少由于不必要的生产者重试而导致消息重复的可能性。
#        request.timeout.ms: 115000
#        #等待send回调的最大时间。常用语重试，如果一定要发送，retries则配Integer.MAX
#        #如果超过该时间：TimeoutException: Expiring 1 record(s) .. has passed since batch creation
#        delivery.timeout.ms: 120000
#        # 生产者在服务器响应之前能发多少个消息，若对消息顺序有严格限制，需要配置为1
#        # max.in.flight.requests.per.connection: 1
